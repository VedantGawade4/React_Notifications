{"version":3,"sources":["subscription.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["convertedVapidKey","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","process","sendSubscription","subscription","fetch","concat","method","body","JSON","stringify","headers","Content-Type","subscribeClick","navigator","serviceWorker","ready","then","registration","pushManager","Notification","requestPermission","getperm","console","log","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","catch","e","permission","error","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","onClick","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.863dc919.chunk.js","sourcesContent":["const convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/notifications/subscribe`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.')\n        return\n      }\n\n      Notification.requestPermission().then(function(getperm) \n      { \n      \n          console.log('Perm granted', getperm) \n      \n      });\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            console.log('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          console.log('Existed subscription detected.')\n          sendSubscription(existedSubscription)\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { subscribeUser } from './subscription';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Push notifications demo.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <button onClick={subscribeClick}>Subcribe</button>\n        </header>\n      </div>\n    );\n  }\n}\nfunction subscribeClick()\n{\n  subscribeUser();\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' ? 'service-worker.js' : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { subscribeUser } from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}